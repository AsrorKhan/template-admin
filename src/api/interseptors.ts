import {    AxiosError,    AxiosInstance,    AxiosRequestConfig,    AxiosResponse,} from 'axios';import authService from '../services/authService';const onRequest = (config: AxiosRequestConfig): AxiosRequestConfig => {    const login_auth_token = localStorage.getItem('token');    if (login_auth_token) {        // @ts-ignore        config.headers.Authorization = `Bearer ${login_auth_token}`;        console.info(`[request] ${JSON.stringify(config)}`);    }    return config;};const onRequestError = (error: AxiosError): Promise<AxiosError> => {    // console.error(`[request error] ${error}`);    return Promise.reject(error);};const onResponse = (response: AxiosResponse): AxiosResponse => {    // console.info(`[response] ${response}`);    return response;};const onResponseError = (error: AxiosError): Promise<AxiosError> => {    // console.error(`[response error] ${error}`);    const config = error.config;    if (        // @ts-ignore        error?.response?.status === '401' &&        config.url !== '/api/authenticate'    ) {        authService.removeAuthenticate();    }    return Promise.reject(error);};export function setupInterceptorsTo(    axiosInstance: AxiosInstance): AxiosInstance {    axiosInstance.interceptors.request.use(onRequest, onRequestError);    axiosInstance.interceptors.response.use(onResponse, onResponseError);    return axiosInstance;}